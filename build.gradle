import net.minecraftforge.gradleutils.PomUtils

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'eclipse'
    id 'org.gradlex.extra-java-module-info' version '1.4.2'
    id 'net.minecraftforge.gradleutils' version '[2.3.0,2.4)'
    id 'net.minecraftforge.licenser' version '1.0.1'
}

group = 'net.minecraftforge'
version = gradleutils.tagOffsetVersion
print("Version: $version")

java {
    toolchain.languageVersion = JavaLanguageVersion.of(16)
    modularity.inferModulePath.set(true)
    withSourcesJar()
}

repositories {
    mavenCentral()
    maven gradleutils.forgeMaven
}

dependencies {
    api(libs.bundles.asm)
    implementation(libs.unsafe)
}

configurations.all {
    outgoing {
        capability("net.minecraftforge:$project.name:$version") // For sub modules, they require the exact casing of the name
        capability("net.minecraftforge:securemodules:$version")
        capability("cpw.mods:securejarhandler:$version")
    }
}

extraJavaModuleInfo {
    failOnMissingModuleInfo = false
}

changelog {
    from '0.9'
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
            'Specification-Title':    'SecureModules',
            'Specification-Vendor':   'Forge Development LLC',
            'Specification-Version':  gradleutils.gitInfo.tag,
            'Implementation-Title':   'SecureModules',
            'Implementation-Version': project.version,
            'Implementation-Vendor':  'Forge Development LLC'
        ] as LinkedHashMap)
    }
}

tasks.register('writeManifest') {
    doLast {
        jar.manifest.writeTo(file('src/main/resources/META-INF/MANIFEST.MF'))
    }
}

eclipse {
    synchronizationTasks writeManifest
    autoBuildTasks writeManifest
}

license {
    header = file("LICENSE-header.txt")
}

publishing {
    publications.register('mavenJava', MavenPublication) {
        configurations.all {
            suppressPomMetadataWarningsFor(it.name)
        }
        from components.java
        artifactId = 'securemodules'
        pom {
            name = 'Secure Modular handler'
            description = 'Making the Java modular system provide security information'
            license PomUtils.Licenses.LGPLv2_1
            developers {
                developer PomUtils.Developers.cpw
                developer PomUtils.Developers.LexManos
            }
        }
    }
    repositories {
        maven gradleutils.publishingForgeMaven
    }
}

// Hack eclipse into knowing that the gradle deps are modules
eclipse.classpath {
    containers 'org.eclipse.buildship.core.gradleclasspathcontainer'
    file.whenMerged { entries.findAll { it.kind == 'lib' || it.path == 'org.eclipse.buildship.core.gradleclasspathcontainer' }.each { it.entryAttributes['module'] = 'true' } }
}

allprojects {
    ext.VALID_VMS = [
        'Adoptium':  [16, 17, 18, 19, 20, 21],
        'Amazon':    [16, 17, 18, 19, 20, 21],
        'Azul':      (16..21),
        'BellSoft':  (16..21),
        'Graal_VM':  [16, 17,     19, 20, 21],
        'IBM':       [16, 17, 18, 19, 20    ],
        'Microsoft': [16, 17,             21],
        'Oracle':    (16..21),
        'SAP':       (16..20)
    ]
    //ext.VALID_VMS = [ 'Adoptium':  [16] ]
}